import { __awaiter, __generator } from "tslib";
import { GetRoleCredentialsCommand, SSOClient } from "@aws-sdk/client-sso";
import { getMasterProfileName, parseKnownFiles } from "@aws-sdk/credential-provider-ini";
import { CredentialsProviderError } from "@aws-sdk/property-provider";
import { getHomeDir } from "@aws-sdk/shared-ini-file-loader";
import { createHash } from "crypto";
import { readFileSync } from "fs";
import { join } from "path";
/**
 * The time window (15 mins) that SDK will treat the SSO token expires in before the defined expiration date in token.
 * This is needed because server side may have invalidated the token before the defined expiration date.
 *
 * @internal
 */
export var EXPIRE_WINDOW_MS = 15 * 60 * 1000;
var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
/**
 * Creates a credential provider that will read from a credential_process specified
 * in ini files.
 */
export var fromSSO = function (init) {
    if (init === void 0) { init = {}; }
    return function () { return __awaiter(void 0, void 0, void 0, function () {
        var profiles;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, parseKnownFiles(init)];
                case 1:
                    profiles = _a.sent();
                    return [2 /*return*/, resolveSSOCredentials(getMasterProfileName(init), profiles, init)];
            }
        });
    }); };
};
var resolveSSOCredentials = function (profileName, profiles, options) { return __awaiter(void 0, void 0, void 0, function () {
    var profile, startUrl, accountId, region, roleName, hasher, cacheName, tokenFile, token, accessToken, sso, ssoResp, e_1, _a, _b, accessKeyId, secretAccessKey, sessionToken, expiration;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                profile = profiles[profileName];
                if (!profile) {
                    throw new CredentialsProviderError("Profile " + profileName + " could not be found in shared credentials file.");
                }
                startUrl = profile.sso_start_url, accountId = profile.sso_account_id, region = profile.sso_region, roleName = profile.sso_role_name;
                if (!startUrl && !accountId && !region && !roleName) {
                    throw new CredentialsProviderError("Profile " + profileName + " is not configured with SSO credentials.");
                }
                if (!startUrl || !accountId || !region || !roleName) {
                    throw new CredentialsProviderError("Profile " + profileName + " does not have valid SSO credentials. Required parameters \"sso_account_id\", \"sso_region\", " +
                        "\"sso_role_name\", \"sso_start_url\". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html", SHOULD_FAIL_CREDENTIAL_CHAIN);
                }
                hasher = createHash("sha1");
                cacheName = hasher.update(startUrl).digest("hex");
                tokenFile = join(getHomeDir(), ".aws", "sso", "cache", cacheName + ".json");
                try {
                    token = JSON.parse(readFileSync(tokenFile, { encoding: "utf-8" }));
                    if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
                        throw new Error("SSO token is expired.");
                    }
                }
                catch (e) {
                    throw new CredentialsProviderError("The SSO session associated with this profile has expired or is otherwise invalid. To refresh this SSO session " +
                        "run aws sso login with the corresponding profile.", SHOULD_FAIL_CREDENTIAL_CHAIN);
                }
                accessToken = token.accessToken;
                sso = options.ssoClient || new SSOClient({ region: region });
                _c.label = 1;
            case 1:
                _c.trys.push([1, 3, , 4]);
                return [4 /*yield*/, sso.send(new GetRoleCredentialsCommand({
                        accountId: accountId,
                        roleName: roleName,
                        accessToken: accessToken,
                    }))];
            case 2:
                ssoResp = _c.sent();
                return [3 /*break*/, 4];
            case 3:
                e_1 = _c.sent();
                throw CredentialsProviderError.from(e_1, SHOULD_FAIL_CREDENTIAL_CHAIN);
            case 4:
                _a = ssoResp.roleCredentials, _b = _a === void 0 ? {} : _a, accessKeyId = _b.accessKeyId, secretAccessKey = _b.secretAccessKey, sessionToken = _b.sessionToken, expiration = _b.expiration;
                if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
                    throw new CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
                }
                return [2 /*return*/, { accessKeyId: accessKeyId, secretAccessKey: secretAccessKey, sessionToken: sessionToken, expiration: new Date(expiration) }];
        }
    });
}); };
//# sourceMappingURL=data:application/json;base64,